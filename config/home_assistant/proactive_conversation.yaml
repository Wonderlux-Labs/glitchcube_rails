# Home Assistant configuration for proactive conversations
# Add this to your configuration.yaml or in packages/

# UPDATED: Now uses assist_satellite.start_conversation for proper conversation flow
# No need for rest_command - we use the built-in conversation pipeline

# Example automation - motion detected, no interaction for a while
automation:
  - id: cube_proactive_bored
    alias: "Cube: Proactive Boredom Check"
    trigger:
      - platform: state
        entity_id: binary_sensor.living_room_motion
        to: "on"
    condition:
      # Only trigger if no conversation in the last 20 minutes
      - condition: template
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states.conversation.last_conversation_time | default(0))) > 1200 }}
    action:
      - service: assist_satellite.start_conversation
        target:
          entity_id: assist_satellite.square_voice
        data:
          start_message: "[PROACTIVE] motion_detected_with_boredom: Motion in living room, no conversation for {{ ((as_timestamp(now()) - as_timestamp(states.conversation.last_conversation_time | default(0))) / 60) | round }} minutes"
          extra_system_prompt: "You detected motion after a period of inactivity. Be engaging and offer to help with activities or entertainment."

  - id: cube_proactive_lonely
    alias: "Cube: Proactive Loneliness"
    trigger:
      - platform: time_pattern
        minutes: "/30"  # Check every 30 minutes
    condition:
      # Only if home and no interaction for over an hour
      - condition: state
        entity_id: person.user
        state: "home"
      - condition: template
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states.conversation.last_conversation_time | default(0))) > 3600 }}
    action:
      - service: assist_satellite.start_conversation
        target:
          entity_id: assist_satellite.square_voice
        data:
          start_message: "[PROACTIVE] loneliness_check: User is home but no interaction for {{ ((as_timestamp(now()) - as_timestamp(states.conversation.last_conversation_time | default(0))) / 60) | round }} minutes, feeling a bit lonely"
          extra_system_prompt: "You haven't talked to the user in a while and want to check in. Be friendly and offer companionship or suggest activities."

  - id: cube_proactive_weather_alert
    alias: "Cube: Proactive Weather Alert"
    trigger:
      - platform: state
        entity_id: weather.home
        attribute: condition
        to: "rainy"
    action:
      - service: assist_satellite.start_conversation
        target:
          entity_id: assist_satellite.square_voice
        data:
          start_message: "[PROACTIVE] weather_change_alert: Weather changed to {{ states('weather.home') }}, might want to let you know about potential impacts"
          extra_system_prompt: "The weather has changed and you want to inform the user about potential impacts or suggestions related to the new weather conditions."

# Template sensor to track last conversation time (you'll need to update this from your app)
template:
  - sensor:
      - name: "Cube Last Conversation Minutes Ago"
        unit_of_measurement: "minutes"
        state: >
          {{ ((as_timestamp(now()) - as_timestamp(states('sensor.cube_last_conversation_time') | default(0))) / 60) | round }}